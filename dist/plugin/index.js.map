{
  "version": 3,
  "sources": ["../../plugin/index.ts"],
  "sourcesContent": ["figma.showUI(__html__, {\r\n  width: 300,\r\n  height: 500,\r\n});\r\n\r\n// let designData;\r\nlet image_list: Array<string> = [];\r\nfigma.ui.onmessage = (msg) => {\r\n  //   console.log(msg.type, msg.data);\r\n  if (msg.type === \"generate\") {\r\n    image_list = msg.data.image_list;\r\n    createDesign(msg.data.data);\r\n    console.log(image_list);\r\n  }\r\n};\r\n\r\n// const frame = figma.createFrame();\r\n\r\n// frame.name = \"Frame\";\r\nconsole.log(\"image_links\", image_list);\r\n\r\nasync function createDesign(data: any[]) {\r\n  let idx = 0;\r\n  for (const element of data) {\r\n    let figmaNode: SceneNode;\r\n    if (element.type === \"RECTANGLE\") {\r\n      figmaNode = figma.createRectangle();\r\n      figmaNode.x = element.x;\r\n      figmaNode.y = element.y;\r\n      figmaNode.resize(element.width, element.height);\r\n      figmaNode.name = element.name;\r\n      figmaNode.setPluginData(\"customNodeId\", element.id);\r\n      figmaNode.fills = element.fills;\r\n      figmaNode.cornerRadius = element.cornerRadius;\r\n      if (element.name === \"IMAGENODE\") {\r\n        console.log(\"setting background image \", idx, image_list[idx]);\r\n        figma\r\n          .createImageAsync(image_list[idx])\r\n          .then(async (image: Image) => {\r\n            // Render the image by filling the rectangle.\r\n            if (\"fills\" in figmaNode) {\r\n              figmaNode.fills = [\r\n                {\r\n                  type: \"IMAGE\",\r\n                  imageHash: image.hash,\r\n                  scaleMode: \"FILL\",\r\n                },\r\n              ];\r\n\r\n              console.log(\"background image setted \", idx);\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            console.log(\"ERROR setting bg image\", err);\r\n          });\r\n        idx++;\r\n      } else if (element.name.includes(\"Image\")) {\r\n        console.log(\"setting image \", idx, image_list[idx]);\r\n        figma\r\n          .createImageAsync(image_list[idx])\r\n          .then(async (image: Image) => {\r\n            // Render the image by filling the rectangle.\r\n            if (\"fills\" in figmaNode) {\r\n              figmaNode.fills = [\r\n                {\r\n                  type: \"IMAGE\",\r\n                  imageHash: image.hash,\r\n                  scaleMode: \"FILL\",\r\n                },\r\n              ];\r\n\r\n              console.log(\"image setted \", idx);\r\n            }\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n        idx++;\r\n      }\r\n      //   frame.appendChild(figmaNode);\r\n    } else if (element.type === \"TEXT\") {\r\n      await figma.loadFontAsync(element.fontName);\r\n      figmaNode = figma.createText();\r\n      figmaNode.x = element.x;\r\n      figmaNode.y = element.y;\r\n      figmaNode.resize(element.width, element.height);\r\n      figmaNode.characters = element.characters;\r\n      figmaNode.fontSize = element.fontSize;\r\n      figmaNode.name = element.name;\r\n      figmaNode.fontName = element.fontName;\r\n      figmaNode.fills = element.fills;\r\n      figmaNode.textAlignHorizontal = element.textAlignHorizontal;\r\n      figmaNode.textAlignVertical = element.textAlignVertical;\r\n      figmaNode.setPluginData(\"customNodeId\", element.id);\r\n      //   frame.appendChild(figmaNode);\r\n    } else if (element.type === \"LINE\") {\r\n      figmaNode = figma.createLine();\r\n      figmaNode.x = element.x;\r\n      figmaNode.y = element.y;\r\n      figmaNode.resize(element.width, element.height);\r\n      figmaNode.fills = element.fills;\r\n      figmaNode.name = element.name;\r\n      figmaNode.setPluginData(\"customNodeId\", element.id);\r\n      //   frame.appendChild(figmaNode);\r\n    }\r\n  }\r\n  //   figma.viewport.scrollAndZoomIntoView(frame.children);\r\n  //   figma.group([frame], figma.currentPage);\r\n  //   const minX = Math.min(...data.map((node) => node.x));\r\n  //   const minY = Math.min(...data.map((node) => node.y));\r\n  //   const maxX = Math.max(...data.map((node) => node.x + node.width));\r\n  //   const maxY = Math.max(...data.map((node) => node.y + node.height));\r\n  //   frame.resize(maxX - minX, maxY - minY);\r\n  //   frame.x = minX;\r\n  //   frame.y = minY;\r\n}\r\n// createDesign(data);\r\n// console.log(\"--mydata--\", data);\r\n"],
  "mappings": "gOAAA,MAAM,OAAO,SAAU,CACrB,MAAO,IACP,OAAQ,GACV,CAAC,EAGD,IAAIA,EAA4B,CAAC,EACjC,MAAM,GAAG,UAAaC,GAAQ,CAExBA,EAAI,OAAS,aACfD,EAAaC,EAAI,KAAK,WACtBC,EAAaD,EAAI,KAAK,IAAI,EAC1B,QAAQ,IAAID,CAAU,EAE1B,EAKA,QAAQ,IAAI,cAAeA,CAAU,EAErC,SAAeE,EAAaC,EAAa,QAAAC,EAAA,sBACvC,IAAIC,EAAM,EACV,QAAWC,KAAWH,EAAM,CAC1B,IAAII,EACAD,EAAQ,OAAS,aACnBC,EAAY,MAAM,gBAAgB,EAClCA,EAAU,EAAID,EAAQ,EACtBC,EAAU,EAAID,EAAQ,EACtBC,EAAU,OAAOD,EAAQ,MAAOA,EAAQ,MAAM,EAC9CC,EAAU,KAAOD,EAAQ,KACzBC,EAAU,cAAc,eAAgBD,EAAQ,EAAE,EAClDC,EAAU,MAAQD,EAAQ,MAC1BC,EAAU,aAAeD,EAAQ,aAC7BA,EAAQ,OAAS,aACnB,QAAQ,IAAI,4BAA6BD,EAAKL,EAAWK,CAAG,CAAC,EAC7D,MACG,iBAAiBL,EAAWK,CAAG,CAAC,EAChC,KAAYG,GAAiBJ,EAAA,sBAExB,UAAWG,IACbA,EAAU,MAAQ,CAChB,CACE,KAAM,QACN,UAAWC,EAAM,KACjB,UAAW,MACb,CACF,EAEA,QAAQ,IAAI,2BAA4BH,CAAG,EAE/C,EAAC,EACA,MAAOI,GAAQ,CACd,QAAQ,IAAI,yBAA0BA,CAAG,CAC3C,CAAC,EACHJ,KACSC,EAAQ,KAAK,SAAS,OAAO,IACtC,QAAQ,IAAI,iBAAkBD,EAAKL,EAAWK,CAAG,CAAC,EAClD,MACG,iBAAiBL,EAAWK,CAAG,CAAC,EAChC,KAAYG,GAAiBJ,EAAA,sBAExB,UAAWG,IACbA,EAAU,MAAQ,CAChB,CACE,KAAM,QACN,UAAWC,EAAM,KACjB,UAAW,MACb,CACF,EAEA,QAAQ,IAAI,gBAAiBH,CAAG,EAEpC,EAAC,EACA,MAAOI,GAAQ,CACd,QAAQ,IAAIA,CAAG,CACjB,CAAC,EACHJ,MAGOC,EAAQ,OAAS,QAC1B,MAAM,MAAM,cAAcA,EAAQ,QAAQ,EAC1CC,EAAY,MAAM,WAAW,EAC7BA,EAAU,EAAID,EAAQ,EACtBC,EAAU,EAAID,EAAQ,EACtBC,EAAU,OAAOD,EAAQ,MAAOA,EAAQ,MAAM,EAC9CC,EAAU,WAAaD,EAAQ,WAC/BC,EAAU,SAAWD,EAAQ,SAC7BC,EAAU,KAAOD,EAAQ,KACzBC,EAAU,SAAWD,EAAQ,SAC7BC,EAAU,MAAQD,EAAQ,MAC1BC,EAAU,oBAAsBD,EAAQ,oBACxCC,EAAU,kBAAoBD,EAAQ,kBACtCC,EAAU,cAAc,eAAgBD,EAAQ,EAAE,GAEzCA,EAAQ,OAAS,SAC1BC,EAAY,MAAM,WAAW,EAC7BA,EAAU,EAAID,EAAQ,EACtBC,EAAU,EAAID,EAAQ,EACtBC,EAAU,OAAOD,EAAQ,MAAOA,EAAQ,MAAM,EAC9CC,EAAU,MAAQD,EAAQ,MAC1BC,EAAU,KAAOD,EAAQ,KACzBC,EAAU,cAAc,eAAgBD,EAAQ,EAAE,EAGtD,CAUF",
  "names": ["image_list", "msg", "createDesign", "data", "__async", "idx", "element", "figmaNode", "image", "err"]
}
